buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".

  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  fixed_route
  capacity
  spawn?
  temp_route
]

globals [graph]

to init-buses
  
  ; Initialize your agents here.
  set spawn? True
  set fixed_route get-route (bus_id mod 7)
  set capacity get-capacity
  show first fixed_route
  set temp_route get-shortest-path-to (first fixed_route)  ;to get to the beginning of a route when just spawned
  go-to-route
  
  if bus_id <= 31 [ add-new-bus 1 ]
  
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
end

; drop off passengers at their destination
to drop-off-passengers
  foreach bus_passengers [
    let passenger_id first ?
    let destination last ?
    
    if destination = current_stop [ drop-off-passenger passenger_id ]
  ]
end

; pick up as many passengers as possible at current stop
to pick-up-passengers
  let free_seats capacity - length bus_passengers
  let n_waiting length get-passengers-at-stop current_stop
  let to_pickup min list free_seats n_waiting
  
  foreach n-of to_pickup get-passengers-at-stop current_stop [ let passenger ?
    pick-up-passenger first passenger
  ]
end

to add-new-bus [ bus_size ]
    if capacity - length bus_passengers = 0 and spawn? [ 
    add-bus bus_size
    
    ; just allow a bus to spawn once
    set spawn? False
  ]
end

to turn-around
  if current_stop = last fixed_route [
    set fixed_route reverse fixed_route
  ]
end

to go-to-route
  ; function that brings the bus to its fixed route after it spawns
   
  if not member? current_stop fixed_route [
    foreach temp_route [travel-to ?]
  ]
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  set label (word length bus_passengers " / " capacity)
  
  ; if the bus is currently at a stop
  if current_stop > -1 [
    set next_stop next-stop-on-route
    drop-off-passengers
    pick-up-passengers 
  ]
  
  ; add new bus if necessary
  add-new-bus 3
  
  ; go towards the next stop
  travel-to next_stop
  
  ; if bus reaches last stop, turn around (TODO: if-statement outside of procedure?)
  turn-around
end