buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".

  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop])
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  passenger_routes ; list containing all ids of the bus passengers and their shortest path ([[passenger_id [shortest path]]  [passenger id [shortest path]]    ...])

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  fixed_route
  route_id ; route-id 8 is the 'flexible style route'
  capacity
  spawn?
  temp_route
  beliefs
  route-style ;  TODO maybe create a new 'fixed route' -> ROUTE 8, which is the flexible style route
  tick_of_vote_request
  stop_driving_at_next_stop?
]

globals [graph]

to init-buses

  ; Initialize your agents here.
  set spawn? True
  set stop_driving_at_next_stop? False
  set capacity get-capacity
  set passenger_routes []
  set fixed_route []
  set route_id -1
  set tick_of_vote_request 0
  init-beliefs

  if member? bus_id initial-fleet [
    init-initial-fleet
  ]

  ; let the whole fleet know you spawned and what route you are taking
  announce-birth

  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
end

; Runs when critical condition is reached. Asks for new bus on the specified route
; FOR FIXED ROUTE BUSES ONLY
to request-bus-on-route [ new_route_id new_bus_capacity]
  let available_bus_ids idle-bus-with-capacity new_bus_capacity
  if length available_bus_ids > 0 [
    let bus_to_aks first available_bus_ids

    ; send request message to one of the waiting buses
    let request_body (list (word "assign-to-route " new_route_id))
    let request_msg_fixed build-message "request" request_body
    send-message bus_to_aks request_msg_fixed
  ]
end


; Runs when a new FLEXIBLE bus is requested
; This is done by bus 
; when the ratio total passengers waiting / capacity of fleet > 1
to request-flexible-bus [ratio]

  ;TODO ratio must be capacity fleet / people waiting

  ; determine bus type
  let new_bus_capacity 12

  if (ratio > yellow_bus_ratio) and (ratio < red_bus_ratio) [
    set new_bus_capacity 60
  ]

  if ratio >= red_bus_ratio [
   set new_bus_capacity 150
  ]
  
  show (word "Requested " new_bus_capacity " at " ratio)
  ; determine which buses can become a new flexible bus of the type determined above
  let available_bus_ids idle-bus-with-capacity new_bus_capacity

  ; ask idle bus to become a flexible bus
  if length available_bus_ids > 0 [
    let new_flex_bus first available_bus_ids

    ; route 8 is the 'flexible route'
    let new_route_id 8

    ; send request message to one of the waiting buses
    let request_body (list (word "assign-to-route " new_route_id))
    let request_msg_fixed build-message "request" request_body
    send-message new_flex_bus request_msg_fixed
  ]



end






; Exeption to general initialization, only do this for the first 7 vehicles
to init-initial-fleet
  set route_id (bus_id mod 7)
  set fixed_route get-route
  set temp_route get-shortest-path-to (first fixed_route)  ;to get to the beginning of a route when just spawned
  set route-style "fixed"
end

; Initialize a table (dictionary) to store beliefs
to init-beliefs
  set beliefs table:make

  table:put beliefs "bus-spec" []
  table:put beliefs "capacity-vote" []
end

;;; TODO: I belief this function can be re-purposed. We drop off all passengers at each stop, so if
;;; it is their stop, they are already out of the bus and won't get back in because they arrived
;;; or need to go to another node.
; drop off passengers at their destination
to drop-off-passengers
  foreach passenger_routes [
    let passenger_id first ?
    let destination last last ?

    ; get shortest path for passenger
    let route_to_destination last ?

    ; drop passengers at their destination or at a transit station on their desired tavel path
    if destination = current_stop or not can-take-passenger route_to_destination next_stop
      [ drop-off-passenger passenger_id
        set passenger_routes remove ( list passenger_id route_to_destination ) passenger_routes
        ]
  ]
end

; pick up as many passengers as possible at current stop
to pick-up-passengers
  let free_seats capacity - length bus_passengers
  let n_waiting length get-passengers-at-stop current_stop
  let to_pickup min list free_seats n_waiting ; How many passengers can be picked up

  ;TODO only pick up passenger if it's next stop of his shortest path is on your route
  foreach get-passengers-at-stop current_stop [

    if capacity - length bus_passengers = 0 [ stop ]

    let passenger ?

    ; get shortest path for passenger
    let destination last passenger
    let route_to_destination get-shortest-path-to destination
    let passenger_id first passenger

    ;If the next stop is in the shortest path of the passenger, take him
    if can-take-passenger route_to_destination next_stop [
      pick-up-passenger passenger_id

      ;update passengers in bus, add their shortest path
      let new_bus_passenger (list passenger_id route_to_destination)
      set passenger_routes lput new_bus_passenger passenger_routes
    ]
  ]


end

;; Flip the route when the last stop is reached for fixed route buses
to turn-around
  ; skip when there is no route to ride
  if length fixed_route < 1 [ stop ]

  if current_stop = last fixed_route [
    set fixed_route reverse fixed_route
  ]
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  set label (word length bus_passengers " / " capacity)

  ; TODO: Find alternative for 'count buses'
  if not (last initial-fleet = bus_id) and count buses < 7 [
    add-bus 1
  ]
  if count buses = 8 and bus_id = 31 [
    add-bus 2
    add-bus 3
  ]

  ; Go trough inbox to ensure up to date mental state
  process-inbox

  ; Unassigned busses just read their messages
  if not (route_id > -1) [ stop ]
  
  if current_stop > -1 and stop_driving_at_next_stop? [ stop-driving ]

  ; Do route-style specific behaviour
  if route-style = "fixed" [ fixed-bus-behaviour ]
  if route-style = "flexible" [ flexible-bus-behaviour ]


  if bus_id = 24 [
    
    ; bus 24 checks if new flexible buses are needed everey 3 ticks
    if ticks mod 3 = 0 [

      let ratio waiting-capacity-ratio
      ; If the
      if ratio > green_bus_ratio [
        ;New flexible bus is needed
        request-flexible-bus ratio
        show "new flex bus is needed"
      ]
    ]
    
    
    ; bus 24 checks if there is an auction needed to aid one of the bus-stations
    if ticks mod 10 = 0 [
      
      ; A variable that stores the id's of busstations that need help
      let stops_need_help bus-stops-that-need-help
      
      ; If there are bus_stops that need help, start an auction
      if length stops_need_help > 0[
        
        ; Start an auction for all bus stops that are crowded
        foreach stops_need_help[
          start-auction ?
        ]
         
      ]
      
    ]
  ]

  ; go towards the next stop
  travel-to next_stop

  ; if bus reaches last stop, turn around (TODO: if-statement outside of procedure?)
  turn-around
end



;;; COMPETITION

;Auction 
to start-auction [bus-stop-id]

  
  ; Get current beliefs about the buses
  let current_state_beliefs table:get beliefs "bus-spec"
  
  ; Variable to store IDs of all medium and large buses that are not 
  ; assigned to a fixed route (i.e. flex or idle)
  let send_message_to []
  
  ; for all buses
  foreach current_state_beliefs[
    
    let temp_bus ?
    let temp_bus_id item 0 temp_bus
    let temp_capacity item 1 temp_bus
    let temproute item 2 temp_bus
    
    ; if flex or idle bus and capacity is medium or large, add to message list
    if (temproute = -1 or temproute = 8) and (temp_capacity = 150 or temp_capacity = 60)[
      ; or .... and ....
      
      ; add to list

      ]
  ]
  
  
end

; TODO process auction results

;;;; COMMUNICATION

; message = [ ticks sender [ performative content ] ]
to process-inbox
  while [not empty? inbox] [
    
    let message first inbox
    let time item 0 message
    let sender item 1 message
    let body item 2 message
    let performative first body
    let content last body

    if performative = "inform-sync" [
      add-belief-from-msg content

      ; first content is a string containing belief_name.
      ; runresult calls the reporter that is contained by the string
      ; (eg. runretrieval "bus-spec", calls to-report bus-spec)
      let reciprocal_data runresult (first content)
      let reply_message build-message "inform" (list (first content) reciprocal_data)
      send-message sender reply_message
    ]
    if performative = "inform" [
      add-belief-from-msg content
    ]
    if performative = "request" [
      let action first content

      ifelse can-perform action [
        agree-to-request sender
        run action
      ][
        fail-on-request sender "Not able to perform this action"
      ]
    ]

    set inbox remove message inbox
  ]
end

to agree-to-request [ requester_id ]
  let content build-message "agree" [True]
  send-message requester_id content
end

to fail-on-request [ requester_id reason ]
  let content build-message "failure" reason
  show content
  send-message requester_id content
end


;;;;;;; FLEXIBLE BUS

to stop-driving
  drop-off-passengers
  set route_id -1
  set fixed_route (list)
  set route-style ""
  
  ; let the fleet know you are idle 
  broadcast-reassignment
end

to fixed-bus-behaviour
  
  ; TODO: Think of better timing to request vote, every tick is very costly for messages
  if empty? bus_passengers [
    request-vote-on-fixed-route-capacity
    set tick_of_vote_request ticks
  ]
  
  ; Bus should wait three ticks before counting the votes
  ; check has to be performed every tick otherwise the chance of
  ; this condition being true is very low.
  if tick_of_vote_request > 0 and ticks = tick_of_vote_request + 3 [
    count-votes-on-capacity
  ]
  
  ; Every station, the bus decides where to go next.
  if current_stop > -1 [
    ifelse member? current_stop fixed_route [
      set next_stop next-stop-on-route fixed_route
      
      ; Only handle passengers on designated route, otherwise the transit system breaks.
      drop-off-passengers
      pick-up-passengers
    ][
    ; otherwise navigate to route
    set next_stop next-stop-on-route temp_route
    ]
    ; add new bus if necessary
    ; TODO: Doesn't take into account the destination of the people that can't be picked up
    ; - Only relevant for transit-stations
    ; TODO: De-activate buses / Re-route buses
    ; TODO: Figure out what bus_type to spawn (do experiments on function parameters)
    ; - Length of route
    ; - Capacity
    ; -
    if full? and spawn? [
      request-bus-on-route route_id 150
      set spawn? false
    ]
  ]
    
end

to flexible-bus-behaviour
  if current_stop > -1 [
    vote-next-stop
  ]
  if waiting-capacity-ratio < green_bus_ratio [ set stop_driving_at_next_stop? True ]
end

;;;;;;; VOTING
;Majority vote to decide next busstop
to vote-next-stop

  ;Drop all passengers
  foreach passenger_routes [
    let passenger_id first ?
    let passenger_destination last last ?


    ; get shortest path for passenger
    let route_to_destination last ?

    ; remove passengers from both passenger lists
    drop-off-passenger passenger_id
    set passenger_routes remove ( list passenger_id route_to_destination ) passenger_routes

  ]


  let waiting_passengers get-passengers-at-stop current_stop

  ; Let all people at current stop vote for next stop
  let votes []
  ; calculate shortest path for all passengers
  foreach waiting_passengers[

    let passenger ?

    ; get shortest path for passenger
    let passenger_destination last passenger
    let route_to_destination get-shortest-path-to passenger_destination
    let passenger_id first passenger

    ; each passenger votes for it's best next destinations
    let vote item 1 route_to_destination
    set votes lput vote votes
  ]

  ; Next stop is stop with the most votes (majority vote)
  let next_bus_destination modes votes
  
  ; If no passengers at stop left (all passengers arrived at destination)
  ; Choose next stop randomly from adjacent bus stops
  if length next_bus_destination = 0 [
    let options item current_stop graph
    set next_stop one-of options
  ]

  if length next_bus_destination = 1 [
    ; Set next stop to next_bus_destination
    set next_stop first next_bus_destination
  ]

  ; if a tie occurred go to closest of the bus-stops that tied
  if length next_bus_destination > 1 [

    ; closest destination is a tuple of bus-stop distance
    let closest_destination [-1 9999999]

    ; Set closest destination to the bus stop that is closest of the most popular
    foreach next_bus_destination [
      let temp_destination ?
      let temp_distance get-distance current_stop temp_destination

      if temp_distance < last closest_destination [
        set closest_destination list temp_destination temp_distance
      ]
    ]
    ; set next destination to closest destination
    set next_stop first closest_destination
  ]

  ; (ONLY) pick up passengers that voted for that stop
  pick-up-passengers
end

to request-vote-on-fixed-route-capacity
  let current_state table:get beliefs "bus-spec"
  ; filter bus-spec belief on buses on your route and extract the bus_id from those bus-specs
  let buses_on_my_route map [ first ? ] filter [ last ? = route_id ] current_state

  ; send request to vote to all buses on the route
  foreach buses_on_my_route [
    let request_body (list (word "vote-under-capacity " bus_id))
    let request_msg build-message "request" request_body
    send-message ? request_msg
  ]
end

to count-votes-on-capacity
  let votes map [ last ? ] table:get beliefs "capacity-vote"
  
  ; the bus that requests the votes always votes against.
  ; This way it will never stop driving if it is the last bus
  set votes fput 0 votes
  let votes_for sum votes
  let votes_against (length votes) - votes_for
  if votes_for > votes_against [
    set stop_driving_at_next_stop? True
    show "stopped driving after vote"
  ]
  
  table:put beliefs "capacity-vote" []
end

;;;;;; VOTE-ON-CAPACITY
to vote-under-capacity [ b_id ]
  let msg_content (list "capacity-vote" (list bus_id under-capacity-vote))
  let message build-message "inform" msg_content
  send-message b_id message
end

; There are no conditions on the ability to cast a vote
; (only active buses on a specific route are asked to vote)
; b_id -> bus id of the bus that requested the vote
to-report can-vote-under-capacity [ b_id ]
  report true
end
;;;; END VOTE-ON-CAPACITY

to-report under-capacity-vote
  let vote 0

  if length bus_passengers / capacity < 0.5 [ set vote 1 ]

  report vote
end


;;;;;;; ASSIGN-TO-ROUTE
;;procedure and reporter belong together
;
; Assign yourself to the new_route_id and let everyone know you did so
; TODO assign je nu bussen niet als hun NIEUWE route id -1 is?
to assign-to-route [ new_route_id ]
  if can-assign-to-route new_route_id [
    set route_id new_route_id
    set stop_driving_at_next_stop? False
    
    ; if fixed route bus
    if route_id != 8 [
      set fixed_route get-route
      set temp_route get-shortest-path-to (first fixed_route)

      set route-style "fixed"
    ]
    ; if flexible bus
    if route_id = 8 [
      set route-style "flexible"
    ]
    
    broadcast-reassignment
    
    ;TODO NIET MEER ALTIJD NIEUWE BUS TOEVOEGEN
    add-bus bus_type
  ]
end
; check condition on which bus is able to assign itself to a new route
; (currently just if it is not assigned yet)
to-report can-assign-to-route [ new_route_id ]
  report route_id = -1
end
;;;; END ASSIGN-TO-ROUTE

; Take massage content and use it to update belief
; content = [ belief_name belief_content ]
to add-belief-from-msg [ content ]
  let belief build-belief (first content) (last content)
  add-belief belief
end

; Broadcast bus specifications to all busses that were created before the caller
; See to-report bus-spec for the data that is shared
to announce-birth
  foreach buses-older-than-me [
    let msg_content (list "bus-spec" bus-spec)
    let message build-message "inform-sync" msg_content
    send-message ? message
  ]
end

;; Difference with announce-birth is that this message doens't ask for a message back
;; AND it is sent to ALL buses.
to broadcast-reassignment
  foreach all-buses-i-know [
    let msg_content (list "bus-spec" bus-spec)
    let message build-message "inform" msg_content
    send-message ? message
  ]
end

;; Add belief to the belief base (avoiding duplicates)
to add-belief [ new_belief ]
  let belief_name first new_belief
  let value last new_belief
  let current_state table:get beliefs belief_name

  if belief_name = "bus-spec" [
    let b_id first value
    
    ; remove the belief on bus with b_id
    set current_state filter [ first ? != b_id ] current_state
  ]

  if not member? value current_state [
    table:put beliefs belief_name lput value current_state
  ]
end

;;;; BDI

;; Create a belief object of a belief_name (string) and content (any object)
to-report build-belief [ belief_name content ]
  report list belief_name content
end

to-report beliefs-with-name [ belief_name ]
  let belief_set filter [ first ? = belief_name ] beliefs
  let values (list)

  ; Add the content of each belief in the belief_set to a new list
  foreach belief_set [
    set values lput last ? values
  ]

  report values
end
