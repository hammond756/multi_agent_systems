;; Reporters about bus properties.

;; Report the capacity of a bus
to-report get-capacity
  if bus_type = 1 [ report 12 ]
  if bus_type = 2 [ report 60 ]
  if bus_type = 3 [ report 150 ]
end

to-report full?
  report capacity - length bus_passengers = 0
end

; Reports the data that buses communicate to know who's who
to-report bus-spec
  report (list bus_id capacity route_id)
end

; Sorts a list on bus id in decending order. Assumes bus_id is first element of every object in the list
; eg. [ [24 "foo"] [27 "bar"] ] -> [ [27 "foo"] [24 "bar"] ]
to-report sort-by-bus-id [ a_list order ]
  let new_list (list)
  if order = "asc" [ set new_list sort-by [ first ?1 > first ?2 ] a_list ]
  if order = "desc" [ set new_list sort-by [ first ?1 < first ?2 ] a_list ]
  report new_list
end

;; Report the bus_id of a bus that is not driving
to-report idle-bus-with-capacity [ requested_capacity ]
  let belief_on_fleet table:get beliefs "bus-spec"

  ; filter on capacity and check if not already assigned
  let candidates filter [ item 1 ? = requested_capacity and item 2 ? = -1 ] belief_on_fleet
  report map [ first ? ] sort-by-bus-id candidates "desc"
end

to-report buses-older-than-me
  let start_id 24
  let bus_ids (list)

  while [ start_id < bus_id ] [
    set bus_ids lput start_id bus_ids
    set start_id start_id + 1
  ]

  report bus_ids
end

to-report all-buses-i-know
  let belief_on_fleet table:get beliefs "bus-spec"
  let bus_ids map [ first ? ] belief_on_fleet
  report bus_ids
end

;;;;; Logic for handling bus-routes
;; Report which route this bus has to take
to-report get-route
  if route_id = 6 [ report [ 3 4 5 10 17 11 ] ]
  if route_id = 5 [ report [ 16 11 1 19 23 14 0 15 18 ] ]
  if route_id = 4 [ report [ 6 8  9 3 16 ] ]
  if route_id = 3 [ report [ 2 8 9 20 21 22 0 ] ]
  if route_id = 2 [ report [ 3 20 12 15 18 ] ]
  if route_id = 1 [ report [ 3 4 10 21 22 13 23 1 7 ] ]
  if route_id = 0 [ report [ 12 22 21 10 13 7 17 5 16 ] ]
end

to-report initial-fleet
  report [ 24 25 26 27 28 29 30 ]
end

;; Report the shortest path a the bus' current stop to another stop
to-report get-shortest-path-to [ bus_stop_id ]
  ; TODO (op meerdere plekken) alles met weighted graph doen!!
  let route []
  ask bus_stop current_stop[
    set route map [ [who] of ? ] nw:turtles-on-path-to turtle bus_stop_id
  ]
  report route
end

;; Report the next stop on the bus' route
to-report next-stop-on-route [ route_list ]
  ;TODO: breaks when elements occurs multiple times in a list (position always returns the position of the first)
  report item (position current_stop route_list + 1) route_list
end

;; report a list of all postions at witch an element occurs
to-report multiple-position [ element a_list ]
  let result (list)
  let counter 0

  foreach a_list [
    if element = ? [
      set result lput counter result
    ]
    set counter (counter + 1)
  ]

  report result
end
;;;; COMMUNICATION

; Create a message from a message_type (string) and content (any type)
; NB: message_type should equal the name of the reporter in the case of an inform-sync
;
; message_types:
; - inform (send some data, one way)
; - inform-sync (send some data and expect the same data in return)
; - request (ask a turtle to perform some action)
to-report build-message [ message_type content ]
  report list message_type content
end

;; Determines whether to take passenger to next stop; returns boolean
to-report can-take-passenger [ passenger_shortest_path next_bus_stop ]
  report member? next_stop passenger_shortest_path
end

; Checks if the agent is able to perform the supplied action.
; action is a string containing a statement (eg "assign-to-route 5")
; This reporter assumes a procedure named "can-<procedure> [<arguments>]" reporter is available.
to-report can-perform [ action ]
  report runresult (word "can-" action)
end



; Calculates when a new flexible bus needs to start driving
to-report waiting-capacity-ratio
  ; Sum the capacity of all buses that are currently active
  let current_state_beliefs table:get beliefs "bus-spec"
  let sum_capacity 0
  
  ; for all buses, if it is active, add to total fleet capacity
  foreach current_state_beliefs[
    
    let temp_bus ?
    if item 2 temp_bus != -1[
       let temp_capacity item 1 temp_bus
       
       set sum_capacity sum_capacity + temp_capacity
      ]
  ]
  
  ; initialize variable to sum the number of people waiting  
  let people_waiting 0
  
  ; create a list of bus stops to loop over .... (didn't work => http://netlogo-users.18673.x6.nabble.com/How-to-convert-agentsets-to-a-list-td4864408.html)
  let bus-stop_list [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ]
  
  ; for all busstops, ask how many people are waiting
  foreach bus-stop_list[
    let bus_stop ?
    let temp_waiting get-passengers-at-stop bus_stop
    set people_waiting length(temp_waiting) + people_waiting
  ]

  ; create ratio variable => if reporter reports 0, no active buses exist (e.g. at tick 0)
  let ratio 0
  
  ; calculate ratio
  if sum_capacity > 0[
    set ratio (people_waiting / sum_capacity)
  ]
  
  report ratio
  
end


; Reports a list of Busstops that have more than 150 people waiting so extra busses can be send there
; on the basis of an auction
to-report bus-stops-that-need-help
  let crowded-stops []
  
  ; Create a list of bus stops to loop over
  let bus-stop_list [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ]
  
  ; for all busstops, ask how many people are waiting
  foreach bus-stop_list[
    let bus-stop-id ?
    let temp_waiting get-passengers-at-stop bus-stop-id
    
    ; if more than 150 people are waiting, mark as crowded bus-stop
    if length(temp_waiting) > 3[
      set crowded-stops fput bus-stop-id crowded-stops
    ]
  ]
  
  ; report the crowded stops
  report crowded-stops
end

to-report distance-between-bus-stops[bs1 bs2]
  ; bs1 is the id of bus_stop 1 and bs2 of 2
  let dist 0
  ask bus_stop bs1 [set dist nw:weighted-distance-to bus_stop bs2 "route_size"]
  report dist
end
